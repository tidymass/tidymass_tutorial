# Accessor

## Data preparation

```{r,eval=TRUE,warning=FALSE, R.options="", message=FALSE, cache=TRUE}
library(tidymass)

data("expression_data")
data("sample_info")
data("variable_info")

object =
  create_mass_dataset(
    expression_data = expression_data,
    sample_info = sample_info,
    variable_info = variable_info
  )
  
object
```

## Base function

```{r,eval=TRUE,warning=FALSE, R.options="", message=FALSE, cache=TRUE}
object[1:5,]
object[,1:5]
object[1:10,1:5]
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=FALSE, cache=TRUE}
colnames(object)
object[,"Blank_3"]

rownames(object) %>% head()
object["M136T55_2_POS",]

object["M136T55_2_POS","Blank_3"]
```

If set `drop = TRUE`, then it will return a numeric vector, not a `mass_dataset`.

```{r,eval=TRUE,warning=FALSE, R.options="", message=FALSE, cache=TRUE}
head(object[,"Blank_3", drop = TRUE])

unlist(object["M136T55_2_POS",,drop = TRUE] )

object["M136T55_2_POS","Blank_3",drop = TRUE]
```

We can also get the values from one `mass_dataset` class use `$` like a `data.frame`.

```{r,eval=TRUE,warning=FALSE, R.options="", message=FALSE, cache=TRUE}
head(object$Blank_3, 20)
```
